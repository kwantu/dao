(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.GK = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var globalurl="",masterDB,localDB,taxonomyDB,authenticatedToSyncGateway=!1,dao=function(){return{authenticateToSyncGateway:function(e,t){var n=new $.Deferred,o="http://"+COUCHBASE_DOMAIN+":"+COUCHBASE_PORT+"/"+TAXONOMY_BUCKET+"/_session",r="POST",a=JSON.stringify({name:e,password:t}),c=!0,i=new XMLHttpRequest;i.withCredentials=!0,i.onload=function(){i.status,i.responseText},i.open(r,o,c),i.setRequestHeader("Content-Type","application/json;charset=UTF-8"),i.send(a);var o="http://"+COUCHBASE_DOMAIN+":"+COUCHBASE_PORT+"/"+COUCHBASE_BUCKET+"/_session",r="POST",a=JSON.stringify({name:e,password:t}),c=!0,i=new XMLHttpRequest;return i.withCredentials=!0,i.onload=function(){var e=i.status,t=i.responseText;200==e?(authenticatedToSyncGateway=!0,n.resolve(t)):n.reject(t)},i.open(r,o,c),i.setRequestHeader("Content-Type","application/json;charset=UTF-8"),i.send(a),n.promise()},get:function(e){var t=new $.Deferred;try{head.mobile&&isCordovaApp?cordova.exec(function(e){t.resolve(e)},function(e){t.reject(e)},"CBLite","getDocument",[{dbname:DBNAME+DB_IDENTIFIER,docId:e}]):localDB.get(e).then(function(e){t.resolve(e)})["catch"](function(n){return console.log("Desktop - error in getting document with id: "+e+". Error stacktrace: "+n),t.reject(n),n})}catch(n){t.reject(n)}return t.promise()},getTaxonomy:function(e){var t=new $.Deferred;return head.mobile&&isCordovaApp?cordova.exec(function(e){t.resolve(e)},function(e){t.reject(e)},"CBLite","getDocument",[{dbname:TAXONOMY_DBNAME+DB_IDENTIFIER,docId:e}]):taxonomyDB.get(e).then(function(e){t.resolve(e)})["catch"](function(n){return console.log("Desktop - error in getting taxonomy with id: "+e+". Error stacktrace: "+n),t.reject(n),n}),t.promise()},save:function(e){var t=new $.Deferred;if(head.mobile&&isCordovaApp)if(0!=e._id.indexOf("_design"))cordova.exec(function(e){t.resolve(e)},function(e){t.reject(e)},"CBLite","saveDocument",[{dbname:DBNAME+DB_IDENTIFIER,docId:e._id,doc:e}]);else{var n={url:globalurl+DBNAME+DB_IDENTIFIER+"/"+e._id,type:"PUT",data:JSON.stringify(e),dataType:"json",contentType:"application/json"};$.ajax(n).done(function(e,n,o){t.resolve(e)}).fail(function(n,o,r){console.log("Mobile - error in saving document with id: "+e._id+". URL: "+globalurl+DBNAME+DB_IDENTIFIER+" Error stacktrace: "+JSON.stringify(n)),t.reject(n.responseText)})}else localDB.put(e).then(function(e){t.resolve(e)})["catch"](function(n){console.log("Desktop - error in saving document with id: "+e._id+". Error stacktrace: "+n),t.reject(n)});return t.promise()},saveAttachment:function(e,t,n,o,r){var a=new $.Deferred;return head.mobile&&isCordovaApp?blobUtil.base64StringToBlob(n,o).then(function(n){var o=new XMLHttpRequest;o.open("PUT",globalurl+DBNAME+DB_IDENTIFIER+"/"+e+"/"+r+"?rev="+t,!0),o.onload=function(e){a.resolve(JSON.parse(o.responseText))},o.send(n)})["catch"](function(e){console.log(e),a.reject(xhr.responseText)}):localDB.putAttachment(e,r,t,n,o).then(function(e){a.resolve(e)})["catch"](function(t){console.log("Desktop -error in saving attachment to the document with id: "+e+". Error stacktrace: "+t),a.reject(t)}),a.promise()},getAttachment:function(e,t,n){var o=new $.Deferred;if(head.mobile&&isCordovaApp){var r=new XMLHttpRequest;r.open("GET",globalurl+DBNAME+DB_IDENTIFIER+"/"+e+"/"+n,!0),r.responseType="blob",r.onload=function(t){if(200==this.status){var n=r.response;blobUtil.blobToBase64String(n).then(function(e){o.resolve(e)})["catch"](function(t){console.log("Mobile - error in getting attachment to the document with id: "+e+". Error stacktrace: "+t),o.reject(r)})}else console.log("Mobile - error in getting attachment to the document with id: "+e),o.reject(r)},r.send()}else localDB.getAttachment(e,n).then(function(e){blobUtil.blobToBase64String(e).then(function(e){o.resolve(e)})["catch"](function(e){o.reject(e)})})["catch"](function(t){console.log("Desktop -error in getting attachment to the document with id: "+e+". Error stacktrace: "+t),o.reject(t)});return o.promise()},deleteAttachment:function(e,t,n){var o=new $.Deferred;if(head.mobile&&isCordovaApp){var r={url:globalurl+DBNAME+DB_IDENTIFIER+"/"+e+"/"+n+"?rev="+t,type:"DELETE",dataType:"json"};$.ajax(r).done(function(e,t,n){o.resolve(e)}).fail(function(t,n,r){console.log("Mobile - error in deleting attachment to the document with id: "+e+". Error stacktrace: "+JSON.stringify(t)),o.reject(t.responseText)})}else localDB.removeAttachment(e,n,t).then(function(e){o.resolve(e)})["catch"](function(t){console.log("Desktop - error in deleting attachment to the document with id: "+e+". Error stacktrace: "+JSON.stringify(xhr)),o.reject(t)});return o.promise()},upsert:function(e){var t=new $.Deferred,n=function(n){e._rev=n._rev,dao.save(e).done(function(e){t.resolve(e)}).fail(function(e){t.reject(e)})},o=function(n){dao.save(e).done(function(e){console.log(e),t.resolve(e)}).fail(function(e){t.reject(e)})};return dao.get(e._id).done(n).fail(o),t.promise()},startPull:function(){var e=new $.Deferred,t=LOCAL_SETTINGS.SUBSCRIPTIONS.syncUsername,n=LOCAL_SETTINGS.SUBSCRIPTIONS.syncPassword;return head.mobile&&isCordovaApp?cordova.exec(function(t){SYNC_SEQ=t,e.resolve(t)},function(t){e.reject(t)},"CBLite","pull",[{dbname:DBNAME+DB_IDENTIFIER,url:"http://"+t+":"+n+"@"+COUCHBASE_DOMAIN+":"+COUCHBASE_PORT+"/"+COUCHBASE_BUCKET}]):0==authenticatedToSyncGateway?dao.authenticateToSyncGateway(t,n).done(function(t){localDB.replicate.from(new PouchDB("http://"+COUCHBASE_DOMAIN+":"+COUCHBASE_PORT+"/"+COUCHBASE_BUCKET,{ajax:{timeout:6e4}}),{live:!1,retry:!0,timeout:6e4}).then(function(t){e.resolve("")})["catch"](function(t){e.reject(t)})}).fail(function(t){e.reject(t)}):localDB.replicate.from(new PouchDB("http://"+COUCHBASE_DOMAIN+":"+COUCHBASE_PORT+"/"+COUCHBASE_BUCKET,{ajax:{timeout:6e4}}),{live:!1,retry:!0,timeout:6e4}).then(function(t){e.resolve("")})["catch"](function(t){e.reject(t)}),e.promise()},pullTaxonomies:function(){var e=new $.Deferred,t=LOCAL_SETTINGS.SUBSCRIPTIONS.syncUsername,n=LOCAL_SETTINGS.SUBSCRIPTIONS.syncPassword;return head.mobile&&isCordovaApp?cordova.exec(function(t){e.resolve(t)},function(t){e.reject(t)},"CBLite","pull",[{dbname:TAXONOMY_DBNAME+DB_IDENTIFIER,url:"http://"+t+":"+n+"@"+COUCHBASE_DOMAIN+":"+COUCHBASE_PORT+"/"+TAXONOMY_BUCKET}]):0==authenticatedToSyncGateway?dao.authenticateToSyncGateway(t,n).done(function(t){taxonomyDB.replicate.from(new PouchDB("http://"+COUCHBASE_DOMAIN+":"+COUCHBASE_PORT+"/"+TAXONOMY_BUCKET,{ajax:{timeout:6e4}}),{live:!1,retry:!0,timeout:6e4}).then(function(t){e.resolve("")})["catch"](function(t){e.reject(t)})}).fail(function(t){e.reject(t)}):taxonomyDB.replicate.from(new PouchDB("http://"+COUCHBASE_DOMAIN+":"+COUCHBASE_PORT+"/"+TAXONOMY_BUCKET,{ajax:{timeout:6e4}}),{live:!1,retry:!0,timeout:6e4}).then(function(t){e.resolve("")})["catch"](function(t){e.reject(t)}),e.promise()},startSync:function(){var e=new $.Deferred;return dao.get("_local/LOCAL_SETTINGS").then(function(t){var n=LOCAL_SETTINGS.SUBSCRIPTIONS.syncUsername,o=LOCAL_SETTINGS.SUBSCRIPTIONS.syncPassword;head.mobile&&isCordovaApp?cordova.exec(function(t){SYNC_SEQ=t,e.resolve(t)},function(t){e.reject(t)},"CBLite","sync",[{dbname:DBNAME+DB_IDENTIFIER,url:"http://"+n+":"+o+"@"+COUCHBASE_DOMAIN+":"+COUCHBASE_PORT+"/"+COUCHBASE_BUCKET}]):0==authenticatedToSyncGateway?dao.authenticateToSyncGateway(n,o).done(function(t){localDB.sync(new PouchDB("http://"+COUCHBASE_DOMAIN+":"+COUCHBASE_PORT+"/"+COUCHBASE_BUCKET,{ajax:{timeout:6e4}}),{live:!0,retry:!0,timeout:6e4}).on("change",function(n){SYNC_SEQ=""+n.change.last_seq,e.resolve(t)}).on("active",function(){}).on("complete",function(e){}).on("error",function(t){e.reject(t)})}).fail(function(t){e.reject(t)}):localDB.sync(new PouchDB("http://"+COUCHBASE_DOMAIN+":"+COUCHBASE_PORT+"/"+COUCHBASE_BUCKET,{ajax:{timeout:6e4}}),{live:!0,retry:!0,timeout:6e4}).on("change",function(n){SYNC_SEQ=""+n.change.last_seq,e.resolve(t)}).on("active",function(){}).on("complete",function(e){}).on("error",function(t){e.reject(t)})}).fail(function(t){e.reject(t)}),e.promise()},startSyncTaxonomies:function(){return dao.pullTaxonomies()},changes:function(){var e=new $.Deferred;return head.mobile&&isCordovaApp?$.ajax({url:globalurl+DBNAME+DB_IDENTIFIER+"/_changes?since="+LOCAL_SETTINGS.SYNC_SEQ,type:"GET",dataType:"json",success:function(t,n,o){e.resolve(t)},error:function(t,n,o){console.log("Error = "+JSON.stringify(t)),e.reject(t.responseText)}}):localDB.changes({since:parseInt(LOCAL_SETTINGS.SYNC_SEQ)}).then(function(t){e.resolve(t)})["catch"](function(t){e.reject(t)}),e.promise()},createDatabase:function(){var e=new $.Deferred;return head.mobile&&isCordovaApp?window.cblite?window.cblite.getURL(function(t,n){if(t)alert("error launching Couchbase Lite: "+t);else{globalurl=n;try{var o=new XMLHttpRequest;o.open("GET",globalurl,!1),o.send(null)}catch(r){}$.ajax({url:globalurl+DBNAME+"master",type:"PUT",data:"",dataType:"json",contentType:"application/json",success:function(t,n,o){201==o.status||412==o.status?dao.getIdentifier().done(function(t){DB_IDENTIFIER=t,dao.createDatabaseImpl(e)}).fail(function(t){DB_IDENTIFIER=generateUUID().substring(0,8),dao.saveIdentifier().done(function(t){dao.createDatabaseImpl(e)})}):e.reject(o.responseText)},error:function(t,n,o){201==t.status||412==t.status?dao.getIdentifier().done(function(t){DB_IDENTIFIER=t,dao.createDatabaseImpl(e)}).fail(function(t){DB_IDENTIFIER=generateUUID().substring(0,8),dao.saveIdentifier().done(function(t){dao.createDatabaseImpl(e)})}):e.reject(t.responseText)}})}}):alert("error, Couchbase Lite plugin not found."):new PouchDB(DBNAME+"master").then(function(t){masterDB=t,dao.getIdentifier().done(function(t){DB_IDENTIFIER=t,dao.createDatabaseImpl(e)}).fail(function(t){DB_IDENTIFIER=generateUUID().substring(0,8),dao.saveIdentifier().done(function(t){dao.createDatabaseImpl(e)})})}),e.promise()},createDatabaseImpl:function(e){head.mobile&&isCordovaApp?($.ajax({url:globalurl+TAXONOMY_DBNAME+DB_IDENTIFIER,type:"PUT",data:"",dataType:"json",contentType:"application/json",success:function(e,t,n){},error:function(e,t,n){}}),$.ajax({url:globalurl+DBNAME+DB_IDENTIFIER,type:"PUT",data:"",dataType:"json",contentType:"application/json",success:function(t,n,o){201==o.status||412==o.status?e.resolve(t):e.reject(o.responseText)},error:function(t,n,o){201==t.status||412==t.status?e.resolve(t.responseText):e.reject(t.responseText)}})):new PouchDB(TAXONOMY_DBNAME+DB_IDENTIFIER).then(function(t){taxonomyDB=t,new PouchDB(DBNAME+DB_IDENTIFIER).then(function(t){localDB=t,e.resolve("Database created")})})},deleteDocument:function(e){var t=new $.Deferred;if(head.mobile&&isCordovaApp){var n=function(e){$.ajax({url:globalurl+DBNAME+DB_IDENTIFIER+"/"+e._id+"?rev="+e._rev,type:"DELETE",data:JSON.stringify(e),dataType:"json",contentType:"application/json",success:function(e,n,o){t.resolve(e)},error:function(e,n,o){t.reject(e.responseText)}})};dao.get(e).done(n).fail(function(e){t.reject(e)})}else localDB.get(e).then(function(e){return localDB.remove(e)}).then(function(e){t.resolve(e)})["catch"](function(e){t.reject(e)});return t.promise()},resetDatabase:function(){var e=new $.Deferred,t=DB_IDENTIFIER;return DB_IDENTIFIER=generateUUID().substring(0,8),dao.saveIdentifier().done(function(n){head.mobile&&isCordovaApp?$.ajax({url:globalurl+TAXONOMY_DBNAME+t,type:"DELETE",success:function(n,o,r){$.ajax({url:globalurl+DBNAME+t,type:"DELETE",success:function(t,n,o){dao.createDatabase().done(new function(n){e.resolve(t)}).fail(function(t){e.resolve(t)})},error:function(t,n,o){e.resolve(t.responseText)}})},error:function(t,n,o){e.resolve(t.responseText)}}):taxonomyDB.destroy().then(function(t){localDB.destroy().then(function(t){dao.createDatabase().done(new function(t){e.resolve(t)}).fail(function(t){e.reject(t)})})["catch"](function(t){e.reject(t)})})["catch"](function(t){e.reject(t)})}),e.promise()},createDocView:function(e,t){var n=new $.Deferred;return t._id="_design/"+e,dao.upsert(t).done(function(e){n.resolve(e)}).fail(function(e){n.reject(e)}),n.promise()},getIdentifier:function(){var e=new $.Deferred;try{if(head.mobile&&isCordovaApp){var t={url:globalurl+DBNAME+"master/_local/SETTINGS",type:"GET",dataType:"json"};$.ajax(t).done(function(t,n,o){e.resolve(t.DB_IDENTIFIER)}).fail(function(t,n,o){e.reject(t)})}else masterDB.get("_local/SETTINGS").then(function(t){e.resolve(t.DB_IDENTIFIER)})["catch"](function(t){return e.reject(t),t})}catch(n){e.reject(n)}return e.promise()},saveIdentifier:function(){var e={DB_IDENTIFIER:DB_IDENTIFIER,_id:"_local/SETTINGS"},t=new $.Deferred,n=function(e){if(head.mobile&&isCordovaApp){var n={url:globalurl+DBNAME+"master/_local/SETTINGS",type:"PUT",data:JSON.stringify(e),dataType:"json",contentType:"application/json"};$.ajax(n).done(function(e,n,o){t.resolve(e)}).fail(function(e,n,o){t.reject(e.responseText)})}else masterDB.put(e).then(function(e){t.resolve(e)})["catch"](function(e){t.reject(e)})},o=function(t){e._rev=t._rev,n(e)},r=function(t){n(e)};if(head.mobile&&isCordovaApp){var a={url:globalurl+DBNAME+"master/_local/SETTINGS",type:"GET",dataType:"json"};$.ajax(a).done(o).fail(r)}else masterDB.get("_local/SETTINGS").then(o)["catch"](r);return t.promise()},getDocView:function(e,t,n){var o=new $.Deferred;try{var r=!1;if(void 0!=n&&void 0!=n.descending&&(r=n.descending),head.mobile&&isCordovaApp){var a="?include_docs=true&key="+n.key+"&limit="+n.pageSizeVal+"&size="+n.pageIndexVal*n.pageSizeVal+"&descending="+r;$.ajax({url:globalurl+DBNAME+DB_IDENTIFIER+"/_design/"+e+"/_view/"+t+a,type:"GET",dataType:"json",success:function(e,t,n){o.resolve(e)},error:function(e,t,n){console.log("error occured while getting doc view "+JSON.stringify(e)),o.reject(e.responseText)}})}else localDB.query(e+"/"+t,{include_docs:!0,key:n.key,limit:n.pageSizeVal,skip:n.pageIndexVal*n.pageSizeVal,descending:r}).then(function(e){o.resolve(e)})["catch"](function(e){console.log(e),o.reject(e)})}catch(c){o.reject(c)}return o.promise()},search:function(e,t){var n=new $.Deferred,o="view_searchData",r=generateUUID(),a={language:"javascript",views:{view_searchData:{map:"function(doc) {var searchableCategories = JSON.parse('"+JSON.stringify(e)+"');if(typeof (doc.title) != 'undefined' && typeof (doc.category) != 'undefined' && typeof (doc.category.term) != 'undefined'){if(searchableCategories.indexOf(doc.category.term) > -1){var docTitle = doc.title.toLowerCase();if( (doc.category.term == 'participant' && doc._id.toLowerCase().indexOf('"+t.toLowerCase()+"') > -1) || docTitle.indexOf('"+t.toLowerCase()+"') > -1) {  var jsonObj = doc; emit(doc.title.toUpperCase(),  jsonObj ); }}}}"}}},c=function(e){setTimeout(function(){var e={pageSizeVal:50,pageIndexVal:0,include_docs:!0};dao.getDocView(r,o,e).done(function(e){n.resolve(e)}).fail(function(e){n.reject(e)})},1e3)};return dao.createDocView(r,a).done(c).fail(function(e){n.reject(e)}),n.promise()},profileData:function(e,t){var n=new $.Deferred,o="view_searchData",r="Search"+e+t,a={pageSizeVal:500,pageIndexVal:0,include_docs:!0};return dao.getDocView(r,o,a).done(function(e){n.resolve(e)}).fail(function(a){var c={language:"javascript",views:{view_searchData:{map:"function(doc) {if(typeof (doc.title) != 'undefined' && typeof (doc.category) != 'undefined' && typeof (doc.category.term) != 'undefined'){if( doc.category.term == '"+e+"' && doc.channels.indexOf('"+t+'\') > -1) {  var jsonObj = {"doc": {  "updated": doc.updated, "_id": doc._id, "title": doc.title, "category": { "term": doc.category.term }, "model": { "pending": { "photos": "" } } }}; emit(doc.title.toUpperCase(),  jsonObj ); }}}'}}},i=function(e){setTimeout(function(){var e={pageSizeVal:500,pageIndexVal:0,include_docs:!0};dao.getDocView(r,o,e).done(function(e){n.resolve(e)}).fail(function(e){n.reject(e)})},2e3)};dao.createDocView(r,c).done(i).fail(function(e){n.reject(e)})}),n}}}();

},{}]},{},[1])(1)
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
